{"mappings":"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","sources":["<anon>","src/assets/js/script.js"],"sourcesContent":["document.addEventListener(\"DOMContentLoaded\", ()=>{\n    const newTaskInput = document.getElementById(\"new-task-input\");\n    const addTaskBtn = document.getElementById(\"add-task-btn\");\n    const taskList = document.getElementById(\"task-list\");\n    const todoListNameInput = document.getElementById(\"todo-list-name-input\");\n    const listTitle = document.getElementById(\"list-title\");\n    const clearListBtn = document.getElementById(\"clear-list-btn\");\n    // Function to load tasks from Local Storage\n    function loadTasks() {\n        const tasks = JSON.parse(localStorage.getItem(\"tasks\")) || [];\n        tasks.forEach((taskText)=>addTaskToDOM(taskText));\n    }\n    // Function to save tasks to Local Storage\n    function saveTasks() {\n        const tasks = [];\n        taskList.querySelectorAll(\".task-text\").forEach((taskElement)=>{\n            if (!taskElement.closest(\"li\").querySelector(\".edit-input\")) tasks.push(taskElement.textContent);\n        });\n        localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n    }\n    // Function to add a task to the DOM using a template literal\n    function addTaskToDOM(taskText) {\n        const listItemHTML = `\n      <li>\n        <span class=\"task-text\">${taskText}</span>\n        <div class=\"task-actions\">\n          <button class=\"edit-btn\">Edit</button>\n          <button class=\"delete-btn\">Delete</button>\n        </div>\n      </li>\n    `;\n        const tempDiv = document.createElement(\"div\"); // Create a temporary div to parse the HTML string\n        tempDiv.innerHTML = listItemHTML;\n        const listItem = tempDiv.firstElementChild; // Get the actual li element\n        // Attach event listeners\n        listItem.querySelector(\".edit-btn\").addEventListener(\"click\", ()=>editTask(listItem, listItem.querySelector(\".task-text\")));\n        listItem.querySelector(\".delete-btn\").addEventListener(\"click\", ()=>deleteTask(listItem));\n        taskList.appendChild(listItem);\n    }\n    // Function to handle adding a new task\n    function addTask() {\n        const taskText = newTaskInput.value.trim();\n        // Validation: Check if the task is empty\n        if (taskText === \"\") {\n            alert(\"Task cannot be empty!\");\n            return;\n        }\n        // Validation: Check for uniqueness (case-insensitive)\n        const existingTasks = Array.from(taskList.querySelectorAll(\".task-text\")).map((span)=>span.textContent.toLowerCase());\n        if (existingTasks.includes(taskText.toLowerCase())) {\n            alert(\"This task already exists!\");\n            return;\n        }\n        addTaskToDOM(taskText);\n        saveTasks(); // Save to local storage\n        newTaskInput.value = \"\"; // Clear the input field\n    }\n    // Function to handle deleting a task\n    function deleteTask(listItem) {\n        if (confirm(\"Are you sure you want to delete this task?\")) {\n            listItem.remove();\n            saveTasks(); // Save to local storage after deletion\n        }\n    }\n    // Function to handle editing a task\n    function editTask(listItem, taskTextSpan) {\n        const originalText = taskTextSpan.textContent;\n        // Create an input field for editing using a template\n        const editInputHTML = `<input type=\"text\" class=\"edit-input\" value=\"${originalText}\">`;\n        const tempDiv = document.createElement(\"div\");\n        tempDiv.innerHTML = editInputHTML;\n        const editInput = tempDiv.firstElementChild;\n        // Create a save button using a template\n        const saveButtonHTML = `<button class=\"save-btn\">Save</button>`;\n        tempDiv.innerHTML = saveButtonHTML; // Reuse tempDiv\n        const saveButton = tempDiv.firstElementChild;\n        // Replace task text span and buttons with edit input and save button\n        const taskActionsDiv = listItem.querySelector(\".task-actions\");\n        const originalEditButton = taskActionsDiv.querySelector(\".edit-btn\");\n        const originalDeleteButton = taskActionsDiv.querySelector(\".delete-btn\");\n        // Remove original buttons\n        taskActionsDiv.removeChild(originalEditButton);\n        taskActionsDiv.removeChild(originalDeleteButton);\n        listItem.replaceChild(editInput, taskTextSpan);\n        taskActionsDiv.appendChild(saveButton);\n        editInput.focus(); // Focus on the input field\n        // Event listener for saving changes\n        saveButton.addEventListener(\"click\", ()=>{\n            const newText = editInput.value.trim();\n            // Validation for edited task\n            if (newText === \"\") {\n                alert(\"Edited task cannot be empty!\");\n                editInput.focus(); // Keep focus on the input if invalid\n                return;\n            }\n            // Check for uniqueness among other tasks (excluding the one being edited)\n            const existingTasks = Array.from(taskList.querySelectorAll(\".task-text\")).filter((span)=>span !== taskTextSpan) // Exclude the original span of the current task\n            .map((span)=>span.textContent.toLowerCase());\n            if (existingTasks.includes(newText.toLowerCase())) {\n                alert(\"This task already exists!\");\n                editInput.focus(); // Keep focus on the input if not unique\n                return;\n            }\n            taskTextSpan.textContent = newText;\n            listItem.replaceChild(taskTextSpan, editInput);\n            // Restore original buttons\n            taskActionsDiv.removeChild(saveButton);\n            taskActionsDiv.appendChild(originalEditButton);\n            taskActionsDiv.appendChild(originalDeleteButton);\n            saveTasks(); // Save to local storage after editing\n        });\n        // Allow saving with Enter key\n        editInput.addEventListener(\"keypress\", (event)=>{\n            if (event.key === \"Enter\") saveButton.click();\n        });\n    }\n    // Function to clear the list\n    function clearList() {\n        if (confirm(\"Are you sure you want to clear all tasks? This action cannot be undone.\")) {\n            taskList.innerHTML = \"\"; // Clears all list items from the DOM\n            saveTasks(); // Clears tasks from localStorage\n        }\n    }\n    // Event Listeners\n    addTaskBtn.addEventListener(\"click\", addTask);\n    todoListNameInput.addEventListener(\"input\", updateTitle);\n    // Allow adding tasks with Enter key in the input field\n    newTaskInput.addEventListener(\"keypress\", (event)=>{\n        if (event.key === \"Enter\") addTask();\n    });\n    // Updates list title from input\n    function updateTitle(e) {\n        listTitle.textContent = e.target.value;\n    }\n    // Add event listener for the Clear List button\n    clearListBtn.addEventListener(\"click\", clearList);\n    // Load tasks when the page loads\n    loadTasks();\n});\n\n//# sourceMappingURL=step8up-week4-todo-list.8a5a2888.js.map\n","document.addEventListener(\"DOMContentLoaded\", () => {\n  const newTaskInput = document.getElementById(\"new-task-input\");\n  const addTaskBtn = document.getElementById(\"add-task-btn\");\n  const taskList = document.getElementById(\"task-list\");\n  const todoListNameInput = document.getElementById(\"todo-list-name-input\");\n  const listTitle = document.getElementById(\"list-title\");\n  const clearListBtn = document.getElementById(\"clear-list-btn\");\n\n  // Function to load tasks from Local Storage\n  function loadTasks() {\n    const tasks = JSON.parse(localStorage.getItem(\"tasks\")) || [];\n    tasks.forEach(taskText => addTaskToDOM(taskText));\n  }\n\n  // Function to save tasks to Local Storage\n  function saveTasks() {\n    const tasks = [];\n    taskList.querySelectorAll(\".task-text\").forEach(taskElement => {\n      if (!taskElement.closest(\"li\").querySelector(\".edit-input\")) { // Only save if not currently editing\n        tasks.push(taskElement.textContent);\n      }\n    });\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n  }\n\n  // Function to add a task to the DOM using a template literal\n  function addTaskToDOM(taskText) {\n    const listItemHTML = `\n      <li>\n        <span class=\"task-text\">${taskText}</span>\n        <div class=\"task-actions\">\n          <button class=\"edit-btn\">Edit</button>\n          <button class=\"delete-btn\">Delete</button>\n        </div>\n      </li>\n    `;\n    const tempDiv = document.createElement(\"div\"); // Create a temporary div to parse the HTML string\n    tempDiv.innerHTML = listItemHTML;\n    const listItem = tempDiv.firstElementChild; // Get the actual li element\n\n    // Attach event listeners\n    listItem.querySelector(\".edit-btn\").addEventListener(\"click\", () => editTask(listItem, listItem.querySelector(\".task-text\")));\n    listItem.querySelector(\".delete-btn\").addEventListener(\"click\", () => deleteTask(listItem));\n\n    taskList.appendChild(listItem);\n  }\n\n  // Function to handle adding a new task\n  function addTask() {\n    const taskText = newTaskInput.value.trim();\n\n    // Validation: Check if the task is empty\n    if (taskText === \"\") {\n      alert(\"Task cannot be empty!\");\n      return;\n    }\n\n    // Validation: Check for uniqueness (case-insensitive)\n    const existingTasks = Array.from(taskList.querySelectorAll(\".task-text\")).map(span => span.textContent.toLowerCase());\n    if (existingTasks.includes(taskText.toLowerCase())) {\n      alert(\"This task already exists!\");\n      return;\n    }\n\n    addTaskToDOM(taskText);\n    saveTasks(); // Save to local storage\n    newTaskInput.value = \"\"; // Clear the input field\n  }\n\n  // Function to handle deleting a task\n  function deleteTask(listItem) {\n    if (confirm(\"Are you sure you want to delete this task?\")) {\n      listItem.remove();\n      saveTasks(); // Save to local storage after deletion\n    }\n  }\n\n  // Function to handle editing a task\n  function editTask(listItem, taskTextSpan) {\n    const originalText = taskTextSpan.textContent;\n\n    // Create an input field for editing using a template\n    const editInputHTML = `<input type=\"text\" class=\"edit-input\" value=\"${originalText}\">`;\n    const tempDiv = document.createElement(\"div\");\n    tempDiv.innerHTML = editInputHTML;\n    const editInput = tempDiv.firstElementChild;\n\n    // Create a save button using a template\n    const saveButtonHTML = `<button class=\"save-btn\">Save</button>`;\n    tempDiv.innerHTML = saveButtonHTML; // Reuse tempDiv\n    const saveButton = tempDiv.firstElementChild;\n\n    // Replace task text span and buttons with edit input and save button\n    const taskActionsDiv = listItem.querySelector(\".task-actions\");\n    const originalEditButton = taskActionsDiv.querySelector(\".edit-btn\");\n    const originalDeleteButton = taskActionsDiv.querySelector(\".delete-btn\");\n\n    // Remove original buttons\n    taskActionsDiv.removeChild(originalEditButton);\n    taskActionsDiv.removeChild(originalDeleteButton);\n\n    listItem.replaceChild(editInput, taskTextSpan);\n    taskActionsDiv.appendChild(saveButton);\n\n    editInput.focus(); // Focus on the input field\n\n    // Event listener for saving changes\n    saveButton.addEventListener(\"click\", () => {\n      const newText = editInput.value.trim();\n\n      // Validation for edited task\n      if (newText === \"\") {\n        alert(\"Edited task cannot be empty!\");\n        editInput.focus(); // Keep focus on the input if invalid\n        return;\n      }\n\n      // Check for uniqueness among other tasks (excluding the one being edited)\n      const existingTasks = Array.from(taskList.querySelectorAll(\".task-text\"))\n        .filter(span => span !== taskTextSpan) // Exclude the original span of the current task\n        .map(span => span.textContent.toLowerCase());\n\n      if (existingTasks.includes(newText.toLowerCase())) {\n        alert(\"This task already exists!\");\n        editInput.focus(); // Keep focus on the input if not unique\n        return;\n      }\n\n      taskTextSpan.textContent = newText;\n      listItem.replaceChild(taskTextSpan, editInput);\n\n      // Restore original buttons\n      taskActionsDiv.removeChild(saveButton);\n      taskActionsDiv.appendChild(originalEditButton);\n      taskActionsDiv.appendChild(originalDeleteButton);\n\n      saveTasks(); // Save to local storage after editing\n    });\n\n    // Allow saving with Enter key\n    editInput.addEventListener(\"keypress\", (event) => {\n      if (event.key === \"Enter\") {\n        saveButton.click();\n      }\n    });\n  }\n\n  // Function to clear the list\n  function clearList() {\n    if (confirm(\"Are you sure you want to clear all tasks? This action cannot be undone.\")) {\n      taskList.innerHTML = \"\"; // Clears all list items from the DOM\n      saveTasks(); // Clears tasks from localStorage\n    }\n  }\n\n  // Event Listeners\n  addTaskBtn.addEventListener(\"click\", addTask);\n  todoListNameInput.addEventListener(\"input\", updateTitle);\n\n  // Allow adding tasks with Enter key in the input field\n  newTaskInput.addEventListener(\"keypress\", (event) => {\n    if (event.key === \"Enter\") {\n      addTask();\n    }\n  });\n\n  // Updates list title from input\n  function updateTitle(e) {\n    listTitle.textContent = e.target.value;\n  }\n\n  // Add event listener for the Clear List button\n  clearListBtn.addEventListener(\"click\", clearList);\n\n  // Load tasks when the page loads\n  loadTasks();\n});\n"],"names":["document","addEventListener","newTaskInput","getElementById","addTaskBtn","taskList","todoListNameInput","listTitle","clearListBtn","saveTasks","tasks","querySelectorAll","forEach","taskElement","closest","querySelector","push","textContent","localStorage","setItem","JSON","stringify","addTaskToDOM","taskText","listItemHTML","tempDiv","createElement","innerHTML","listItem","firstElementChild","editTask","taskTextSpan","originalText","editInputHTML","editInput","saveButton","taskActionsDiv","originalEditButton","originalDeleteButton","removeChild","replaceChild","appendChild","focus","newText","value","trim","alert","existingTasks","Array","from","filter","span","map","toLowerCase","includes","event","key","click","confirm","remove","addTask","e","target","parse","getItem"],"version":3,"file":"step8up-week4-todo-list.8a5a2888.js.map"}