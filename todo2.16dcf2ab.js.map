{"mappings":"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","sources":["<anon>","src/assets/js/script2.js"],"sourcesContent":["document.addEventListener(\"DOMContentLoaded\", ()=>{\n    const newTaskInput = document.getElementById(\"new-task-input\");\n    const addTaskBtn = document.getElementById(\"add-task-btn\");\n    const taskList = document.getElementById(\"task-list\");\n    const todoListNameInput = document.getElementById(\"todo-list-name-input\");\n    const listTitle = document.getElementById(\"list-title\");\n    const clearListBtn = document.getElementById(\"clear-list-btn\");\n    // Function to load tasks from Local Storage\n    function loadTasks() {\n        const tasks = JSON.parse(localStorage.getItem(\"tasks\")) || [];\n        tasks.forEach((taskText)=>addTaskToDOM(taskText));\n    }\n    // Function to save tasks to Local Storage\n    function saveTasks() {\n        const tasks = [];\n        taskList.querySelectorAll(\".task-text\").forEach((taskElement)=>{\n            if (!taskElement.closest(\"li\").querySelector(\".edit-input\")) tasks.push(taskElement.textContent);\n        });\n        localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n    }\n    // Function to add a task to the DOM\n    function addTaskToDOM(taskText) {\n        const listItem = document.createElement(\"li\");\n        // Create a span for the task text\n        const taskTextSpan = document.createElement(\"span\");\n        taskTextSpan.className = \"task-text\";\n        taskTextSpan.textContent = taskText;\n        // Create a div for actions (buttons)\n        const taskActionsDiv = document.createElement(\"div\");\n        taskActionsDiv.className = \"task-actions\";\n        // Create Edit button\n        const editButton = document.createElement(\"button\");\n        editButton.textContent = \"Edit\";\n        editButton.className = \"edit-btn\";\n        editButton.addEventListener(\"click\", ()=>editTask(listItem, taskTextSpan));\n        // Create Delete button\n        const deleteButton = document.createElement(\"button\");\n        deleteButton.textContent = \"Delete\";\n        deleteButton.className = \"delete-btn\";\n        deleteButton.addEventListener(\"click\", ()=>deleteTask(listItem));\n        taskActionsDiv.appendChild(editButton);\n        taskActionsDiv.appendChild(deleteButton);\n        listItem.appendChild(taskTextSpan);\n        listItem.appendChild(taskActionsDiv);\n        taskList.appendChild(listItem);\n    }\n    // Function to handle adding a new task\n    function addTask() {\n        const taskText = newTaskInput.value.trim();\n        // Validation: Check if the task is empty\n        if (taskText === \"\") {\n            alert(\"Task cannot be empty!\");\n            return;\n        }\n        // Validation: Check for uniqueness (case-insensitive)\n        const existingTasks = Array.from(taskList.querySelectorAll(\".task-text\")).map((span)=>span.textContent.toLowerCase());\n        if (existingTasks.includes(taskText.toLowerCase())) {\n            alert(\"This task already exists!\");\n            return;\n        }\n        addTaskToDOM(taskText);\n        saveTasks(); // Save to local storage\n        newTaskInput.value = \"\"; // Clear the input field\n    }\n    // Function to handle deleting a task\n    function deleteTask(listItem) {\n        if (confirm(\"Are you sure you want to delete this task?\")) {\n            listItem.remove();\n            saveTasks(); // Save to local storage after deletion\n        }\n    }\n    // Function to handle editing a task\n    function editTask(listItem, taskTextSpan) {\n        const originalText = taskTextSpan.textContent;\n        // Create an input field for editing\n        const editInput = document.createElement(\"input\");\n        editInput.type = \"text\";\n        editInput.className = \"edit-input\";\n        editInput.value = originalText;\n        // Create a save button\n        const saveButton = document.createElement(\"button\");\n        saveButton.textContent = \"Save\";\n        saveButton.className = \"save-btn\";\n        // Replace task text span and buttons with edit input and save button\n        const taskActionsDiv = listItem.querySelector(\".task-actions\");\n        const originalEditButton = taskActionsDiv.querySelector(\".edit-btn\");\n        const originalDeleteButton = taskActionsDiv.querySelector(\".delete-btn\");\n        // Remove original buttons\n        taskActionsDiv.removeChild(originalEditButton);\n        taskActionsDiv.removeChild(originalDeleteButton);\n        listItem.replaceChild(editInput, taskTextSpan);\n        taskActionsDiv.appendChild(saveButton);\n        editInput.focus(); // Focus on the input field\n        // Event listener for saving changes\n        saveButton.addEventListener(\"click\", ()=>{\n            const newText = editInput.value.trim();\n            // Validation for edited task\n            if (newText === \"\") {\n                alert(\"Edited task cannot be empty!\");\n                editInput.focus(); // Keep focus on the input if invalid\n                return;\n            }\n            // Check for uniqueness among other tasks (excluding the one being edited)\n            const existingTasks = Array.from(taskList.querySelectorAll(\".task-text\")).filter((span)=>span !== taskTextSpan) // Exclude the original span of the current task\n            .map((span)=>span.textContent.toLowerCase());\n            if (existingTasks.includes(newText.toLowerCase())) {\n                alert(\"This task already exists!\");\n                editInput.focus(); // Keep focus on the input if not unique\n                return;\n            }\n            taskTextSpan.textContent = newText;\n            listItem.replaceChild(taskTextSpan, editInput);\n            // Restore original buttons\n            taskActionsDiv.removeChild(saveButton);\n            taskActionsDiv.appendChild(originalEditButton);\n            taskActionsDiv.appendChild(originalDeleteButton);\n            saveTasks(); // Save to local storage after editing\n        });\n        // Allow saving with Enter key\n        editInput.addEventListener(\"keypress\", (event)=>{\n            if (event.key === \"Enter\") saveButton.click();\n        });\n    }\n    // Function to clear the list\n    function clearList() {\n        if (confirm(\"Are you sure you want to clear all tasks? This action cannot be undone.\")) {\n            taskList.innerHTML = \"\"; // Clears all list items from the DOM\n            saveTasks(); // Clears tasks from localStorage\n        }\n    }\n    // Event Listeners\n    addTaskBtn.addEventListener(\"click\", addTask);\n    todoListNameInput.addEventListener(\"input\", updateTitle);\n    // Allow adding tasks with Enter key in the input field\n    newTaskInput.addEventListener(\"keypress\", (event)=>{\n        if (event.key === \"Enter\") addTask();\n    });\n    // Updates list title from input\n    function updateTitle(e) {\n        if (e.target.value !== \"\") listTitle.textContent = e.target.value;\n        else listTitle.textContent = \"My TODO List\";\n    }\n    // Add event listener for the Clear List button\n    clearListBtn.addEventListener(\"click\", clearList);\n    // Load tasks when the page loads\n    loadTasks();\n});\n\n//# sourceMappingURL=todo2.16dcf2ab.js.map\n","document.addEventListener(\"DOMContentLoaded\", () => {\n  const newTaskInput = document.getElementById(\"new-task-input\");\n  const addTaskBtn = document.getElementById(\"add-task-btn\");\n  const taskList = document.getElementById(\"task-list\");\n  const todoListNameInput = document.getElementById(\"todo-list-name-input\");\n  const listTitle = document.getElementById(\"list-title\");\n  const clearListBtn = document.getElementById(\"clear-list-btn\");\n\n  // Function to load tasks from Local Storage\n  function loadTasks() {\n    const tasks = JSON.parse(localStorage.getItem(\"tasks\")) || [];\n    tasks.forEach(taskText => addTaskToDOM(taskText));\n  }\n\n  // Function to save tasks to Local Storage\n  function saveTasks() {\n    const tasks = [];\n    taskList.querySelectorAll(\".task-text\").forEach(taskElement => {\n      if (!taskElement.closest(\"li\").querySelector(\".edit-input\")) { // Only save if not currently editing\n        tasks.push(taskElement.textContent);\n      }\n    });\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n  }\n\n  // Function to add a task to the DOM\n  function addTaskToDOM(taskText) {\n    const listItem = document.createElement(\"li\");\n\n    // Create a span for the task text\n    const taskTextSpan = document.createElement(\"span\");\n    taskTextSpan.className = \"task-text\";\n    taskTextSpan.textContent = taskText;\n\n    // Create a div for actions (buttons)\n    const taskActionsDiv = document.createElement(\"div\");\n    taskActionsDiv.className = \"task-actions\";\n\n    // Create Edit button\n    const editButton = document.createElement(\"button\");\n    editButton.textContent = \"Edit\";\n    editButton.className = \"edit-btn\";\n    editButton.addEventListener(\"click\", () => editTask(listItem, taskTextSpan));\n\n    // Create Delete button\n    const deleteButton = document.createElement(\"button\");\n    deleteButton.textContent = \"Delete\";\n    deleteButton.className = \"delete-btn\";\n    deleteButton.addEventListener(\"click\", () => deleteTask(listItem));\n\n    taskActionsDiv.appendChild(editButton);\n    taskActionsDiv.appendChild(deleteButton);\n\n    listItem.appendChild(taskTextSpan);\n    listItem.appendChild(taskActionsDiv);\n    taskList.appendChild(listItem);\n  }\n\n  // Function to handle adding a new task\n  function addTask() {\n    const taskText = newTaskInput.value.trim();\n\n    // Validation: Check if the task is empty\n    if (taskText === \"\") {\n      alert(\"Task cannot be empty!\");\n      return;\n    }\n\n    // Validation: Check for uniqueness (case-insensitive)\n    const existingTasks = Array.from(taskList.querySelectorAll(\".task-text\")).map(span => span.textContent.toLowerCase());\n    if (existingTasks.includes(taskText.toLowerCase())) {\n      alert(\"This task already exists!\");\n      return;\n    }\n\n    addTaskToDOM(taskText);\n    saveTasks(); // Save to local storage\n    newTaskInput.value = \"\"; // Clear the input field\n  }\n\n  // Function to handle deleting a task\n  function deleteTask(listItem) {\n    if (confirm(\"Are you sure you want to delete this task?\")) {\n      listItem.remove();\n      saveTasks(); // Save to local storage after deletion\n    }\n  }\n\n  // Function to handle editing a task\n  function editTask(listItem, taskTextSpan) {\n    const originalText = taskTextSpan.textContent;\n\n    // Create an input field for editing\n    const editInput = document.createElement(\"input\");\n    editInput.type = \"text\";\n    editInput.className = \"edit-input\";\n    editInput.value = originalText;\n\n    // Create a save button\n    const saveButton = document.createElement(\"button\");\n    saveButton.textContent = \"Save\";\n    saveButton.className = \"save-btn\";\n\n    // Replace task text span and buttons with edit input and save button\n    const taskActionsDiv = listItem.querySelector(\".task-actions\");\n    const originalEditButton = taskActionsDiv.querySelector(\".edit-btn\");\n    const originalDeleteButton = taskActionsDiv.querySelector(\".delete-btn\");\n\n    // Remove original buttons\n    taskActionsDiv.removeChild(originalEditButton);\n    taskActionsDiv.removeChild(originalDeleteButton);\n\n    listItem.replaceChild(editInput, taskTextSpan);\n    taskActionsDiv.appendChild(saveButton);\n\n    editInput.focus(); // Focus on the input field\n\n    // Event listener for saving changes\n    saveButton.addEventListener(\"click\", () => {\n      const newText = editInput.value.trim();\n\n      // Validation for edited task\n      if (newText === \"\") {\n        alert(\"Edited task cannot be empty!\");\n        editInput.focus(); // Keep focus on the input if invalid\n        return;\n      }\n\n      // Check for uniqueness among other tasks (excluding the one being edited)\n      const existingTasks = Array.from(taskList.querySelectorAll(\".task-text\"))\n        .filter(span => span !== taskTextSpan) // Exclude the original span of the current task\n        .map(span => span.textContent.toLowerCase());\n\n      if (existingTasks.includes(newText.toLowerCase())) {\n        alert(\"This task already exists!\");\n        editInput.focus(); // Keep focus on the input if not unique\n        return;\n      }\n\n      taskTextSpan.textContent = newText;\n      listItem.replaceChild(taskTextSpan, editInput);\n\n      // Restore original buttons\n      taskActionsDiv.removeChild(saveButton);\n      taskActionsDiv.appendChild(originalEditButton);\n      taskActionsDiv.appendChild(originalDeleteButton);\n\n      saveTasks(); // Save to local storage after editing\n    });\n\n    // Allow saving with Enter key\n    editInput.addEventListener(\"keypress\", (event) => {\n      if (event.key === \"Enter\") {\n        saveButton.click();\n      }\n    });\n  }\n\n  // Function to clear the list\n  function clearList() {\n    if (confirm(\"Are you sure you want to clear all tasks? This action cannot be undone.\")) {\n      taskList.innerHTML = \"\"; // Clears all list items from the DOM\n      saveTasks(); // Clears tasks from localStorage\n    }\n  }\n\n  // Event Listeners\n  addTaskBtn.addEventListener(\"click\", addTask);\n  todoListNameInput.addEventListener(\"input\", updateTitle);\n\n  // Allow adding tasks with Enter key in the input field\n  newTaskInput.addEventListener(\"keypress\", (event) => {\n    if (event.key === \"Enter\") {\n      addTask();\n    }\n  });\n\n  // Updates list title from input\n  function updateTitle(e) {\n    if (e.target.value !== \"\") {\n      listTitle.textContent = e.target.value;\n    } else {\n      listTitle.textContent = \"My TODO List\";\n    }\n  }\n\n  // Add event listener for the Clear List button\n  clearListBtn.addEventListener(\"click\", clearList);\n\n  // Load tasks when the page loads\n  loadTasks();\n});\n"],"names":["document","addEventListener","newTaskInput","getElementById","addTaskBtn","taskList","todoListNameInput","listTitle","clearListBtn","saveTasks","tasks","querySelectorAll","forEach","taskElement","closest","querySelector","push","textContent","localStorage","setItem","JSON","stringify","addTaskToDOM","taskText","listItem","createElement","taskTextSpan","className","taskActionsDiv","editButton","editTask","originalText","editInput","type","value","saveButton","originalEditButton","originalDeleteButton","removeChild","replaceChild","appendChild","focus","newText","trim","alert","existingTasks","Array","from","filter","span","map","toLowerCase","includes","event","key","click","deleteButton","confirm","remove","addTask","e","target","innerHTML","parse","getItem"],"version":3,"file":"todo2.16dcf2ab.js.map"}